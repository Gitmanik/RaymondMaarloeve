name: Build Unity Game Project

on:
  push:
    branches: [ main, gitmanik-workflow-test ]
    # paths:
    #   - 'RaymondMaarloeve/**'  # Trigger on changes in the 'RaymondMaarloeve' folder
  workflow_dispatch:

jobs:
  buildForAllPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
          - StandaloneLinux64
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Library folder
        uses: actions/cache@v4
        with:
          path: RaymondMaarloeve/Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
            
      - name: Build Unity Project
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: RaymondMaarloeve
          targetPlatform: ${{ matrix.targetPlatform }}
          
      - name: Zip the build
        env:
          TARGET_PLATFORM: ${{ matrix.targetPlatform }}
        run: |
          echo "Creating zip for $TARGET_PLATFORM..."
          cd build/$TARGET_PLATFORM
          zip -r ${{ github.workspace }}/$TARGET_PLATFORM.zip .
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.targetPlatform }}
          path: ${{ github.workspace }}/${{ matrix.targetPlatform }}.zip

  release:
      needs: buildForAllPlatforms
      runs-on: ubuntu-latest

      steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Get commit history since last release
        id: changelog
        shell: bash
        run: |
          # Get the last tag (release), or fallback to the first commit if no tags are found
          LAST_RELEASE=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "Last release: $LAST_RELEASE"
    
          # Get the commit log from the last release to the current commit
          COMMITS=$(git log $LAST_RELEASE..HEAD --oneline)
          echo "Commits since last release:"
          echo "$COMMITS"
    
          # Save the commit log to a markdown file with additional information
          echo "# Release Changelog for ${{ github.repository }}" > $RUNNER_TEMP/commits.md
          echo "Release Date: $(date '+%Y-%m-%d %H:%M:%S')" >> $RUNNER_TEMP/commits.md
          echo "### Changelog for Launcher build:" >> $RUNNER_TEMP/commits.md
          echo "$COMMITS" >> $RUNNER_TEMP/commits.md
        
      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: StandaloneWindows64
          path: art/windows

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: StandaloneLinux64
          path: art/linux

      - name: Get current date and time
        id: datetime
        run: echo "::set-output name=current_datetime::$(date '+%Y-%m-%d-%H%M%S')"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-${{ steps.datetime.outputs.current_datetime }}  # Tag in format release-YYYY-MM-DD-HHMMSS
          release_name: Release ${{ steps.datetime.outputs.current_datetime }}
          body_path: ${{ runner.temp }}/commits.md
          draft: false
          prerelease: false

      - name: Upload Windows Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: art/windows/StandaloneWindows64.zip
          asset_name: Build-StandaloneWindows64.zip
          asset_content_type: application/zip

      - name: Upload Linux Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: art/linux/StandaloneLinux64.zip
          asset_name: Build-StandaloneLinux64.zip
          asset_content_type: application/zip
